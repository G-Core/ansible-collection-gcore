---
- vars:
    api_key: "{{ API_KEY }}"
    api_host: "{{ API_HOST }}"
    project_id: "{{ PROJECT_ID }}"
    region_id: "{{ REGION_ID }}"
    instance_name: test_ansible_instance
    new_instance_name: test_ansible_instance_2
    instance_flavor: g1-standard-1-2
    instance_volumes: [{
      'source': 'image',
      'size': 10,
      'type_name': 'standard',
      'boot_index': 0,
      'image_id': '9c440e4d-a157-4389-bb10-c53a72755356',
      'delete_on_termination': True
    }]
    instance_interfaces: [{"type": "external"}]

  block:
    - name: Create new instance
      gcore.cloud.instance:
        api_key: "{{ api_key }}"
        api_host: "{{ api_host }}"
        project_id: "{{ project_id }}"
        region_id: "{{ region_id }}"
        command: create
        names: ["{{ instance_name }}"]
        flavor: "{{ instance_flavor }}"
        volumes: "{{ instance_volumes }}"
        interfaces: "{{ instance_interfaces }}"
      register: created_instance
    - name: Verify instance
      ansible.builtin.assert:
        that:
          - created_instance.data.status == "ACTIVE"
          - created_instance.data.instance_name == "{{ instance_name }}"
          - created_instance.data.flavor.flavor_name == "{{ instance_flavor }}"

    - name: Update instance's name
      gcore.cloud.instance:
        api_key: "{{ api_key }}"
        api_host: "{{ api_host }}"
        project_id: "{{ project_id }}"
        region_id: "{{ region_id }}"
        command: update
        name: "{{ new_instance_name }}"
        instance_id: "{{ created_instance.data.instance_id }}"
      register: updated_instance
    - name: Verify new instance name
      ansible.builtin.assert:
        that:
          - updated_instance.data.instance_name == "{{ new_instance_name }}"

  always:
    - name: Cleanup instances
      import_tasks: ./targets/common/tasks/cleanup_instances.yml
