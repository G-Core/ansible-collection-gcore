---
- block:
    - name: Ensure API key is provided
      ansible.builtin.fail:
        msg: GCORE_API_TOKEN should be defined in tests/integration/integration_config.yml
      when:
        - GCORE_API_TOKEN is not defined
        - GCORE_API_TOKEN | length == 0

    - name: Ensure project id is provided
      ansible.builtin.fail:
        msg: GCORE_PROJECT_ID should be defined in tests/integration/integration_config.yml
      when:
        - GCORE_PROJECT_ID is not defined
        - GCORE_PROJECT_ID | length == 0

    - name: Ensure region id is provided
      ansible.builtin.fail:
        msg: GCORE_REGION_ID should be defined in tests/integration/integration_config.yml
      when:
        - GCORE_REGION_ID is not defined
        - GCORE_REGION_ID | length == 0

    - name: Create new empty volume
      community.gcore.gcore_volume:
        api_token: "{{ GCORE_API_TOKEN }}"
        api_endpoint: "{{ GCORE_API_ENDPOINT }}"
        project_id: "{{ GCORE_PROJECT_ID }}"
        region_id: "{{ GCORE_REGION_ID }}"
        command: create
        source: "{{ volume_source }}"
        name: "{{ volume_name }}"
        size: "{{ volume_size }}"
      register: result

    - name: Verify task
      ansible.builtin.assert:
        that:
          - result.data["tasks"] | list | length == 1
    
    - name: Wait for volume
      ansible.builtin.pause:
        minutes: 1

  always:
    - name: Find volume by name
      community.gcore.gcore_volume_info:
        api_token: "{{ GCORE_API_TOKEN }}"
        api_endpoint: "{{ GCORE_API_ENDPOINT }}"
        project_id: "{{ GCORE_PROJECT_ID }}"
        region_id: "{{ GCORE_REGION_ID }}"
        name_part: "{{ volume_name }}"
      register: result

    - name: Delete test volume
      community.gcore.gcore_volume:
        api_token: "{{ GCORE_API_TOKEN }}"
        api_endpoint: "{{ GCORE_API_ENDPOINT }}"
        project_id: "{{ GCORE_PROJECT_ID }}"
        region_id: "{{ GCORE_REGION_ID }}"
        command: delete
        volume_id: "{{ result.data[0]['id'] }}"
